# -*- coding: utf-8 -*-
"""121140233_Lilis Swastika_Prak4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oS_7e-5ALJWnmUJn_N5v6B7DWxw_tL6j

## **Lilis Swastika**
## **121140233**
## **Praktikum 4 Pemrograman Berbasis Objek**

## **Nomor 1**
"""

class Komputer:
    def __init__(self, nama, jenis, harga, merk):
        self.nama = nama
        self.jenis = jenis
        self.harga = harga
        self.merk = merk

class Processor(Komputer):
    def __init__(self, merk, nama, harga, jumlah_core, kecepatan_processor):
        super().__init__(nama, 'Processor', harga, merk) #inheritance
        self.jumlah_core = jumlah_core
        self.kecepatan_processor = kecepatan_processor

class RAM(Komputer):
    def __init__(self, merk, jenis, harga, capacity):
        super().__init__(jenis, "RAM", harga, merk)
        self.capacity = capacity

class HDD(Komputer):
    def __init__(self, merk, jenis, harga, capacity, rpm):
        super().__init__(jenis, "SATA", harga, merk)
        self.capacity = capacity
        self.rpm = rpm

class VGA(Komputer):
    def __init__(self, merk, jenis, harga, capacity):
        super().__init__(jenis, "VGA", harga, merk)
        self.capacity = capacity

class PSU(Komputer):
    def __init__(self, merk, jenis, harga, daya):
        super().__init__(jenis, "PSU", harga, merk)
        self.daya = daya

#pendefinisian
p1 = Processor('Intel','Core i7 7740X',4350000,4,'4.3GHz')
p2 = Processor('AMD','Ryzen 5 3600',250000,4,'4.3GHz')
ram1 = RAM('V-Gen','DDR4 SODimm PC19200/2400MHz',328000,'4GB')
ram2 = RAM('G.SKILL','DDR4 2400MHz',328000,'4GB')
hdd1 = HDD('Seagate','HDD 2.5 inch',295000,'500GB',7200)
hdd2 = HDD('Seagate','HDD 2.5 inch',295000,'1000GB',7200)
vga1 = VGA('Asus','VGA GTX 1050',250000,'2GB')
vga2 = VGA('Asus','1060Ti',250000,'8GB')
psu1 = PSU('Corsair','Corsair V550',250000,'500W')
psu2 = PSU('Corsair','Corsair V550',250000,'500W')

rakit = [[p1,ram1,hdd1,vga1,psu1],[p2,ram2,hdd2,vga2,psu2]] #pembuatan list
for i, komputer in enumerate(rakit):
    for komponen in komputer:
        print(f"{komponen.jenis} {komponen.nama} produksi {komponen.merk}")
    print()

"""## **Nomor 2**"""

import random

class Robot:
    def __init__(self, name, health, damage):
        self.name = name
        self.health = health
        self.damage = damage
        self.jumlah_turn = 0

class Antares(Robot):
    def __init__(self):
        super().__init__("Antares", 50000, 5000)
        self.multiplier = 1.0

    def lakukan_aksi(self, lawan):
        if self.jumlah_turn % 3 == 0 and self.jumlah_turn != 0:
            self.multiplier = 1.5
            print(f"{self.name} mendapatkan multiplier sebanyak {self.multiplier}")
        else:
            self.multiplier = 1.0
        damage = int(self.damage * self.multiplier)
        print(f"{self.name} menyerang sebanyak {damage} DMG")
        lawan.terima_aksi(damage)
        self.jumlah_turn += 1
    
    def terima_aksi(self, damage):
        if self.health - damage <= 0:
            self.health = 0
        else:
            self.health -= damage
            print(f"{self.name} menerima serangan sebanyak {damage} DMG")

class Alphasetia(Robot):
    def __init__(self):
        super().__init__("Alphasetia", 40000, 6000)
        self.jumlah_turn = 0

    def lakukan_aksi(self, lawan):
        if self.jumlah_turn % 2 == 0 and self.jumlah_turn != 0:
            self.health += 4000
            print(f"{self.name} mendapatkan kesehatan sebanyak 4000 HP")
        print(f"{self.name} menyerang sebanyak {self.damage} DMG")
        lawan.terima_aksi(self.damage)
        self.jumlah_turn += 1
    
    def terima_aksi(self, damage):
        if self.health - damage <= 0:
            self.health = 0
        else:
            self.health -= damage
            print(f"{self.name} menerima serangan sebanyak {damage} DMG")

class Lecalicus(Robot):
    def __init__(self):
        super().__init__("Lecalicus", 45000, 5500)
        self.multiplier = 1.0
        self.jumlah_turn = 0

    def lakukan_aksi(self, lawan):
        if self.jumlah_turn % 4 == 0 and self.jumlah_turn != 0:
            self.health += 7000
            self.multiplier = 2.0
            print(f"{self.name} mendapatkan HP sebanyak 7000 HP dan multiplier sebanyak {self.multiplier}")
        else:
            self.multiplier = 1.0
            damage = int(self.damage * self.multiplier)
        print(f"{self.name} menyerang sebanyak {damage} DMG")
        lawan.terima_aksi(damage)
        self.jumlah_turn += 1

    def terima_aksi(self, damage):
        if self.health - damage <= 0:
            self.health = 0
        else:
            self.health -= damage
            print(f"{self.name} menerima serangan sebanyak {damage} DMG")


print("Selamat datang di pertandingan robot Yamako")
robotku = int(input("Pilih robotmu (1 = Antares, 2 = Alphasetia, 3 = Lecalicus) : "))
robotmu = random.randint(1, 3)
print(f"Pilih robotmu (1 = Antares, 2 = Alphasetia, 3 = Lecalicus) : {robotmu}")

if robotku == 1:
    robot_1 = Antares()
elif robotku == 2:
    robot_1 = Alphasetia()
elif robotku == 3:
    robot_1 = Lecalicus()
else:
    print("pilih angka 1-3")

if robotmu == 1:
    robot_2 = Antares()
elif robotmu == 2:
    robot_2 = Alphasetia()
elif robotmu == 3:
    robot_2 = Lecalicus()
else:
    print("pilih angka 1-3")

turn = 0
print("Selanjutnya, pilih 1 untuk batu, 2 untuk kertas, dan 3 untuk gunting")
while robot_1.health > 0 and robot_2.health > 0:
    print()
    turn += 1
    print(f"turn saat ini = {turn}")
    print(f"robotmu {robot_1.name} - {robot_1.health} HP , robot lawan {robot_2.name} - {robot_2.health} HP")
    tangan_1 = int(input(f"Pilih tangan robotmu ({robot_1.name}): "))
    tangan_2 = random.randint(1, 3)
    print(f"Pilih tangan robot lawan ({robot_1.name}]): {tangan_2}")

    if (tangan_1 == 3 and tangan_2 == 2) or (tangan_1 == 1 and tangan_2 == 3) or (tangan_1 == 2 and tangan_2 == 1):
        robot_1.lakukan_aksi(robot_2)
    elif tangan_1 == tangan_2:
        print("Seri!")
    else:
        robot_2.lakukan_aksi(robot_1)

print("game selesai!")